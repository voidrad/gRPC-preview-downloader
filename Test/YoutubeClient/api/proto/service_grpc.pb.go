// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetterClient is the client API for Getter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetterClient interface {
	GetPreview(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
}

type getterClient struct {
	cc grpc.ClientConnInterface
}

func NewGetterClient(cc grpc.ClientConnInterface) GetterClient {
	return &getterClient{cc}
}

func (c *getterClient) GetPreview(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, "/api.Getter/GetPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetterServer is the server API for Getter service.
// All implementations must embed UnimplementedGetterServer
// for forward compatibility
type GetterServer interface {
	GetPreview(context.Context, *GetFileRequest) (*GetFileResponse, error)
	mustEmbedUnimplementedGetterServer()
}

// UnimplementedGetterServer must be embedded to have forward compatible implementations.
type UnimplementedGetterServer struct {
}

func (UnimplementedGetterServer) GetPreview(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreview not implemented")
}
func (UnimplementedGetterServer) mustEmbedUnimplementedGetterServer() {}

// UnsafeGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetterServer will
// result in compilation errors.
type UnsafeGetterServer interface {
	mustEmbedUnimplementedGetterServer()
}

func RegisterGetterServer(s grpc.ServiceRegistrar, srv GetterServer) {
	s.RegisterService(&Getter_ServiceDesc, srv)
}

func _Getter_GetPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetterServer).GetPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Getter/GetPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetterServer).GetPreview(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Getter_ServiceDesc is the grpc.ServiceDesc for Getter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Getter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Getter",
	HandlerType: (*GetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPreview",
			Handler:    _Getter_GetPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
